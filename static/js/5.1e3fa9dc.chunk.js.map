{"version":3,"sources":["assets/img/damir-bosnjak.jpg","components/Search.tsx","components/User.tsx","components/Main.tsx","redux/actions.tsx","services/APIsersices.tsx"],"names":["module","exports","Search","useState","userInput","setUserInput","error","useSelector","state","userReducer","dispatch","useDispatch","Card","className","Body","Form","onSubmit","e","preventDefault","fetchUserData","Row","Col","md","FormGroup","Control","placeholder","type","onChange","target","value","Button","variant","User","name","setName","userName","setUserName","followers","setFollowers","following","setFollowing","repos","setRepos","avatar","setAvatar","profileBio","setBio","user","useEffect","setData","login","public_repos","avatar_url","bio","cardFooterData","prop","info","img","alt","src","require","href","Footer","map","el","index","key","lg","xs","to","Main","Object","keys","length","Container","id","findUser","then","response","data","types","payload","catch","status","gotError","fetchUserDetails","getDetails","githubAPI","axios","get","getCommits","repo","branch","getBranches"],"mappings":"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","file":"static/js/5.1e3fa9dc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/damir-bosnjak.a6f24e7d.jpg\";","import React, { useState } from \"react\";\r\nimport { Button, Card, FormGroup, Form, Row, Col } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchUserData } from \"../redux/actions\";\r\nimport { RootState } from \"../redux\";\r\n\r\nconst Search: React.FC = () => {\r\n  const [userInput, setUserInput] = useState<string>(\"\");\r\n  const { error } = useSelector((state: RootState) => state.userReducer);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>): void => {\r\n    e.preventDefault();\r\n    dispatch(fetchUserData(userInput));\r\n  };\r\n\r\n  return (\r\n    <Card className=\"card-user\">\r\n      <h5 className=\"text-center mt-4\">Search user</h5>\r\n      <Card.Body>\r\n        <Form onSubmit={handleSubmit}>\r\n          <Row className=\"justify-content-center\">\r\n            <Col className=\"pr-1\" md=\"5\">\r\n              <FormGroup>\r\n                <Form.Control\r\n                  placeholder=\"Github user\"\r\n                  type=\"text\"\r\n                  onChange={e => setUserInput(e.target.value)}\r\n                />\r\n              </FormGroup>\r\n            </Col>\r\n            <Col className=\"px-1\" md=\"3\">\r\n              <Button className=\"btn-round\" variant=\"dark\" type=\"submit\">\r\n                Search\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n          {error ? <Row className=\"justify-content-center\">{error}</Row> : null}\r\n        </Form>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Search","import React, { useState, useEffect } from \"react\";\r\nimport { Card, Row, Col } from \"react-bootstrap\";\r\nimport { TiUser, TiBook } from \"react-icons/ti\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { RootState } from \"../redux\";\r\nimport { User as UserType } from \"../models/interfaces\";\r\n\r\nconst User: React.FC = () => {\r\n  const [name, setName] = useState(\"\");\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [followers, setFollowers] = useState(0);\r\n  const [following, setFollowing] = useState(0);\r\n  const [repos, setRepos] = useState(0);\r\n  const [avatar, setAvatar] = useState(\"\");\r\n  const [profileBio, setBio] = useState(\"\");\r\n\r\n  const { user } = useSelector((state: RootState) => state.userReducer);\r\n\r\n  useEffect(() => {\r\n    setData(user);\r\n  }, [user]);\r\n\r\n  const setData = (user: UserType) => {\r\n    setName(user.name);\r\n    setUserName(user.login);\r\n    setFollowers(user.followers);\r\n    setFollowing(user.following);\r\n    setRepos(user.public_repos);\r\n    setAvatar(user.avatar_url);\r\n    setBio(user.bio);\r\n  };\r\n\r\n  const cardFooterData = [\r\n    { prop: followers, info: \"followers\", img: <TiUser /> },\r\n    { prop: repos, info: \"repos\", img: <TiBook /> },\r\n    { prop: following, info: \"following\", img: <TiUser /> }\r\n  ];\r\n\r\n  return (\r\n    <Card className=\"card-user\">\r\n      <div className=\"image\">\r\n        <img alt=\"...\" src={require(\"../assets/img/damir-bosnjak.jpg\")} />\r\n      </div>\r\n      <Card.Body>\r\n        <div className=\"author\">\r\n          <a href={`https://github.com/${userName}`}>\r\n            <img alt=\"...\" className=\"avatar border-gray\" src={avatar} />\r\n            <h5 className=\"title\">{name}</h5>\r\n          </a>\r\n          <p className=\"description\">{userName}</p>\r\n        </div>\r\n        <p className=\"description text-center\">{profileBio}</p>\r\n      </Card.Body>\r\n      <Card.Footer>\r\n        <hr />\r\n        <div className=\"button-container\">\r\n          <Row>\r\n            {cardFooterData.map((el, index) => {\r\n              return (\r\n                <Col key={index} className=\"ml-auto\" lg=\"3\" md=\"6\" xs=\"6\">\r\n                  <Link to={`/git_viewer/${userName}/${el.info}`}>\r\n                    <span>\r\n                      {el.img}\r\n                      {el.prop}\r\n                    </span>\r\n                  </Link>\r\n                </Col>\r\n              );\r\n            })}\r\n          </Row>\r\n        </div>\r\n      </Card.Footer>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default User;\r\n","import React, { useEffect } from \"react\";\r\nimport { Row, Col, Container } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport Search from \"./Search\";\r\nimport UserProfile from \"./User\";\r\nimport { fetchUserData } from \"../redux/actions\";\r\nimport { RootState } from \"../redux\";\r\n\r\n\r\nconst Main: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const { user } = useSelector((state: RootState) => state.userReducer);\r\n\r\n  useEffect(() => {\r\n    if (!user || !Object.keys(user).length) dispatch(fetchUserData(\"example\"));\r\n  });\r\n\r\n  return (\r\n    <Container>\r\n      <Row className=\"align-items-stretch\">\r\n        <Col md=\"4\">\r\n          <UserProfile />\r\n        </Col>\r\n        <Col md=\"8\">\r\n          <Search />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import * as types from \"./types\";\r\nimport { findUser, getDetails } from \"../services/APIsersices\";\r\n\r\nexport function fetchUserData(id: string) {\r\n  return dispatch => {\r\n    findUser(id)\r\n      .then(response => {\r\n        dispatch(receiveUserData(response.data));\r\n      })\r\n      .catch(error => {\r\n        switch (error.response.status) {\r\n          case 404:\r\n            dispatch(gotError(\"No user with that email.\"));\r\n            break;\r\n          case 401:\r\n            dispatch(gotError(\"Invalid user.\"));\r\n            break;\r\n          default:\r\n            dispatch(gotError(\"Something wrong\"));\r\n            return;\r\n        }\r\n      });\r\n  };\r\n}\r\n\r\nfunction receiveUserData(data: any) {\r\n  return {\r\n    type: types.RECEIVE_USER_DATA,\r\n    payload: data\r\n  };\r\n}\r\n\r\nexport function fetchUserDetails(prop: string, user: string) {\r\n  return (dispatch) => {\r\n    dispatch({ type: types.SET_PENDING });\r\n    getDetails(user, prop)\r\n      .then(response => {\r\n        dispatch(receiveUserDetails(response.data));\r\n      })\r\n      .catch(error => {\r\n        dispatch(gotError(error));\r\n      });\r\n  };\r\n}\r\n\r\nfunction receiveUserDetails(data: any): types.Action {\r\n  return {\r\n    type: types.RECEIVE_USER_DETAILES,\r\n    payload: data\r\n  };\r\n}\r\n\r\nfunction gotError(data: string): types.Action {\r\n  return {\r\n    type: types.SET_ERROR,\r\n    payload: data\r\n  };\r\n}\r\n","import axios from \"axios\";\r\nimport {\r\n  User,\r\n  ServerResponse,\r\n  UserDetails,\r\n  Commit,\r\n  Branch\r\n} from \"../models/interfaces\";\r\n\r\nconst githubAPI = \"https://api.github.com/\";\r\n\r\nexport function findUser(id: string): Promise<ServerResponse<User>> {\r\n  return axios.get(`${githubAPI}users/${id}`);\r\n}\r\n\r\nexport function getDetails(\r\n  id: string,\r\n  prop: string\r\n): Promise<ServerResponse<Array<UserDetails>>> {\r\n  return axios.get(`${githubAPI}users/${id}/${prop}`);\r\n}\r\n\r\nexport function getCommits(\r\n  id: string,\r\n  repo: string,\r\n  branch:string\r\n): Promise<ServerResponse<Array<Commit>>> {\r\n  return axios.get(`${githubAPI}repos/${id}/${repo}/commits?sha=${branch}`);\r\n}\r\n\r\nexport function getBranches(\r\n  id: string,\r\n  repo: string\r\n): Promise<ServerResponse<Array<Branch>>> {\r\n  return axios.get(`${githubAPI}repos/${id}/${repo}/branches`);\r\n}\r\n\r\nexport function getBranchesDiff(\r\n  id: string,\r\n  repo: string,\r\n  firstBranch: string,\r\n  secondBranch: string\r\n): Promise<ServerResponse<Object>> {\r\n  return axios.get(`${githubAPI}repos/${id}/${repo}/compare/${firstBranch}...${secondBranch}`);\r\n}"],"sourceRoot":""}