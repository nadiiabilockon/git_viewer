{"version":3,"sources":["services/APIsersices.js","redux/actions.js","components/InfoList.js"],"names":["githubAPI","fetchUserData","id","dispatch","axios","get","findUser","then","response","data","type","types","payload","catch","error","status","console","log","fetchUserDetails","user","store","getState","login","InfoList","props","userDetails","useSelector","state","useDispatch","useEffect","Header","Title","tag","Body","className"],"mappings":"sIAEMA,EAAY,gC,YCEX,SAASC,EAAcC,GAC5B,OAAO,SAAAC,IDDF,SAAkBD,GACvB,OAAOE,IAAMC,IAAN,UAAaL,GAAb,OAAyBE,KCC9BI,CAASJ,GACNK,MAAK,SAAAC,GAmBZ,IAAyBC,EAlBjBN,GAkBiBM,EAlBQD,EAASC,KAmBjC,CACLC,KAAMC,IACNC,QAASH,QAnBNI,OAAM,SAAAC,GACL,OAAQA,EAAMN,SAASO,QACrB,KAAK,IACHC,QAAQC,IAAI,4BACZ,MACF,KAAK,IACHD,QAAQC,IAAI,iBACZ,MACF,QAEE,YADAD,QAAQC,IAAI,qCAcjB,SAASC,IACd,IAAMC,EAAOC,QAAMC,WAAWF,KAAKG,MAC5B,OAAO,SAAAnB,GD3BT,IAAoBD,KC4BLiB,ED3Bbf,IAAMC,IAAN,UAAaL,GAAb,OAAyBE,KC4BpBK,MAAK,SAAAC,GAmBnB,IAA4BC,EAlBbN,GAkBaM,EAlBeD,EAASC,KAmB3C,CACLC,KAAMC,IACNC,QAASH,QAnBCI,OAAM,SAAAC,GACL,OAAQA,EAAMN,SAASO,QACrB,KAAK,IACHC,QAAQC,IAAI,4BACZ,MACF,KAAK,IACHD,QAAQC,IAAI,iBACZ,MACF,QAEE,YADAD,QAAQC,IAAI,qCAjD/B,qE,gCCAA,4FAMe,SAASM,EAASC,GAC/B,IAAMC,EAAcC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,eACzCtB,EAAWyB,cAiBjB,OAfAC,qBAAU,WACR1B,EAASe,iBACR,CAACO,IAcF,kBAAC,IAAD,KACE,kBAAC,IAAKK,OAAN,KACE,kBAAC,IAAKC,MAAN,CAAYC,IAAI,QAIlB,kBAAC,IAAKC,KAAN,KACE,wBAAIC,UAAU","file":"static/js/6.a9909e0a.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst githubAPI = \"https://api.github.com/users/\";\r\n\r\nexport function findUser(id) {\r\n  return axios.get(`${githubAPI}${id}`);\r\n}\r\n\r\nexport function getDetails(id) {\r\n  return axios.get(`${githubAPI}${id}`);\r\n}\r\n","import * as types from './types';\r\nimport { findUser, getDetails } from \"../services/APIsersices\";\r\nimport {store} from \"../index\";\r\n\r\nexport function fetchUserData(id) {\r\n  return dispatch => {\r\n    findUser(id)\r\n      .then(response => {\r\n        dispatch(receiveUserData(response.data));\r\n      })\r\n      .catch(error => {\r\n        switch (error.response.status) {\r\n          case 404:\r\n            console.log(\"No user with that email.\");\r\n            break;\r\n          case 401:\r\n            console.log(\"Invalid user.\");\r\n            break;\r\n          default:\r\n            console.log(\"There was an error loggin in\");\r\n            return;\r\n        }\r\n      });\r\n  };\r\n}\r\n\r\nfunction receiveUserData(data) {\r\n  return {\r\n    type: types.RECEIVE_USER_DATA,\r\n    payload: data\r\n  };\r\n}\r\n\r\nexport function fetchUserDetails() {\r\n  const user = store.getState().user.login;\r\n         return dispatch => {\r\n           getDetails(user)\r\n             .then(response => {\r\n               dispatch(receiveUserDetails(response.data));\r\n             })\r\n             .catch(error => {\r\n               switch (error.response.status) {\r\n                 case 404:\r\n                   console.log(\"No user with that email.\");\r\n                   break;\r\n                 case 401:\r\n                   console.log(\"Invalid user.\");\r\n                   break;\r\n                 default:\r\n                   console.log(\"There was an error loggin in\");\r\n                   return;\r\n               }\r\n             });\r\n         };\r\n       }\r\n\r\nfunction receiveUserDetails(data) {\r\n  return {\r\n    type: types.RECEIVE_USER_DETAILES,\r\n    payload: data\r\n  };\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { Card, Row, Col } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchUserDetails } from \"../redux/actions\";\r\n\r\nexport default function InfoList(props) {\r\n  const userDetails = useSelector(state => state.userDetails);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchUserDetails());\r\n  }, [userDetails]);\r\n\r\n  // const handleInfo = params => {\r\n  //   axios\r\n  //     .get(`${githubAPI}${userName}/${params}`)\r\n  //     .then(data => {\r\n  //       setInfo(data.data);\r\n  //       toggleShow(params);\r\n  //     })\r\n  //     .catch(function(error) {\r\n  //       console.log(error);\r\n  //     });\r\n  // };\r\n  return (\r\n    <Card>\r\n      <Card.Header>\r\n        <Card.Title tag=\"h4\">\r\n          {/* {props.header.replace(/^\\w/, c => c.toUpperCase())} */}\r\n        </Card.Title>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <ul className=\"list-unstyled team-members\">\r\n          {/* {props.info.map((el, index) => {\r\n            return (\r\n              <li key={index}>\r\n                {props.header !== \"repos\" ? (\r\n                  <Row>\r\n                    <Col md=\"2\" xs=\"2\">\r\n                      <div className=\"avatar\">\r\n                        <img\r\n                          alt=\"...\"\r\n                          className=\"img-circle img-no-padding img-responsive\"\r\n                          src={el.avatar_url}\r\n                        />\r\n                      </div>\r\n                    </Col>\r\n                    <Col md=\"7\" xs=\"7\">\r\n                      {el.login}\r\n                    </Col>\r\n                  </Row>\r\n                ) : (\r\n                  <Row>\r\n                    <Col>\r\n                      <Link to={`/branch/${el.default_branch}`}>\r\n                        {el.name}{\" \"}\r\n                      </Link>\r\n                      <Row>\r\n                        <Col md=\"5\" xs=\"5\">\r\n                          <span className=\"text-muted\">\r\n                            <small>Default branch</small>\r\n                            <br />\r\n                            <small>Language</small>\r\n                          </span>\r\n                        </Col>\r\n                        <Col md=\"7\" xs=\"7\" className=\"text-right\">\r\n                          <small>{el.default_branch}</small>\r\n                          <br />\r\n                          <small>{el.language}</small>\r\n                        </Col>\r\n                      </Row>\r\n                    </Col>\r\n                  </Row>\r\n                )}\r\n              </li>\r\n            );\r\n          })} */}\r\n        </ul>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n}\r\n"],"sourceRoot":""}